
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## expects 'outdir' as argument
> 
> outdir <- getwd()
> trunc <- 1
> trial <- 1
> 
> ## get command line arg
> #args = commandArgs(trailingOnly=TRUE)
> #if (length(args)==0) {
> #  stop("At least one argument must be supplied (output dir).\n")
> #} else if (length(args)==1) {
> #  outdir <- args[1]
> #}
> 
> print(outdir)
[1] "/Users/dexter/Dropbox/McMaster/Current/Thesis/code/stochastic-comparison/sirs-parallel"
> rdsfile <- paste(outdir, "/", "thread-", trunc, "-", trial, ".rds", sep = "")
> print(rdsfile)
[1] "/Users/dexter/Dropbox/McMaster/Current/Thesis/code/stochastic-comparison/sirs-parallel/thread-1-1.rds"
> 
> ##--------------------------------------------------------------------------------------------
> ##--------------------------------------------------------------------------------------------
> 
> ## number of forcast trajecotries to draw for each method
> ## (if2: parametric bootstrap, hmcmc: bootstrap)
> nTraj <- 2
> 
> ##--------------------------------------------------------------------------------------------
> ##--------------------------------------------------------------------------------------------
> 
> library(reshape2)
> library(rstan)
Loading required package: ggplot2
rstan (Version 2.9.0, packaged: 2016-01-05 16:17:47 UTC, GitRev: 05c3d0058b6a)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> library(Rcpp)
> 
> T       <- 100
> i_infec <- 10
> steps   <- 7
> N       <- 500
> sigma   <- 3
> 
> ## Generate true trajecory and synthetic data
> ##
> 
> pars_true <- c(R0 = 3.0,    # new infected people per infected person
+           r = 0.1,      # recovery rate
+           N = 500,      # population size
+           eta = 0.5,    # geometric random walk
+           berr = 0.5,	# Beta geometric walk noise
+           re = 1 )    	# resusceptibility
> 
> true_init_cond <- c(S = N - i_infec,
+                     I = i_infec,
+                     R = 0)
> 
> ## external files
> 
> # R source files
> stoc_sirs_file 			<- paste(getwd(),"../../sir-functions", "StocSIRS.r", sep = "/")
> stoc_sirs_stan_file 	<- paste(getwd(),"../../sir-functions", "StocSIRSstan.r", sep = "/")
> if2_sirs_paraboot_file 	<- paste(getwd(), "if2-sirs-paraboot.r", sep = "/")
> smap_file 				<- paste(getwd(), "../../smap", "smap.r", sep = "/")
> source(stoc_sirs_file)
> source(stoc_sirs_stan_file)
> source(if2_sirs_paraboot_file)
Loading required package: iterators
> source(smap_file)
> 
> # C++ source files
> if2file 	<- paste(getwd(), "../../if2/if2-sirs", "if2-sirs.cpp", sep="/")
> hmcfile 	<- paste(getwd(), "../../hmc/hmc-sirs", "sirs-euler.stan", sep="/")
> 
> ## IF2 settings
> 
> NP          <- 2500
> nPasses     <- 50
> coolrate    <- 0.975
> 
> ## Smap settings
> 
> E 			<- 10
> theta 		<- 10
> 
> # get raw data
> sdeout_true <- StocSIRS(true_init_cond, pars_true, T, steps)
> colnames(sdeout_true) <- c('S','I','R','B')
> 
> infec_counts_raw <- sdeout_true[,'I'] + rnorm(T+1, 0, sigma)
> infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
> 
> ## fit once to compile
> ##
> 
> # conform data to stan's required format
> datlen <- T*7 + 1
> 
> data <- matrix(data = -1, nrow = T+1, ncol = steps)
> data[,1] <- infec_counts
> standata <- as.vector(t(data))[1:datlen]
> 
> #options
> rstan_options(auto_write = TRUE)
> 
> stan_options <- list(   chains = 1,    		# number of chains
+                         iter   = 2000, 		# iterations per chain
+                         warmup = 1000, 		# warmup interations
+                         thin   = 1)   		# thinning number
> 
> # data
> sirs_data <- list(T = datlen,       # simulation time
+                   y = standata,     # infection count data
+                   N = 500,          # population size
+                   h = 1/steps )     # step size per day
> 
> # fit!
> initialfit <- with(stan_options,
+                 stan(file   = hmcfile,
+                     data    = sirs_data,
+                     chains  = chains,
+                     iter    = iter,
+                     warmup  = warmup,
+                     thin    = thin)
+                 )

SAMPLING FOR MODEL 'sirs-euler' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 1, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 1, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 1, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 1, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 1, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 1, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 1, Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain 1, Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain 1, Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain 1, Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain 1, Iteration: 2000 / 2000 [100%]  (Sampling)# 
#  Elapsed Time: 351.509 seconds (Warm-up)
#                307.342 seconds (Sampling)
#                658.851 seconds (Total)
# 
The following numerical problems occured the indicated number of times after warmup on chain 1
                                                                                         count
Exception thrown at line 59: normal_log: Location parameter is nan, but must be finite!      4
Exception thrown at line 59: normal_log: Location parameter is -inf, but must be finite!     1
When a numerical problem occurs, the Metropolis proposal gets rejected.
However, by design Metropolis proposals sometimes get rejected even when there are no numerical problems.
Thus, if the number in the 'count' column is small, do not ask about this message on stan-users.
> 
> 
> ## Run multiple trajectories
> #########################################################################################################
> 
> Tlim <- T - trunc
> 
> #if2SSEs  <- numeric(nTrials)
> #hmcSSEs  <- numeric(nTrials)
> #smapSSEs <- numeric(nTrials)
> 
> # get true trajectory
> sdeout_true <- StocSIRS(true_init_cond, pars_true, T, steps)
> colnames(sdeout_true) <- c('S','I','R','B')
> 
> # get full data
> infec_counts_raw <- sdeout_true[,'I'] + rnorm(T+1, 0, sigma)
> infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
> 
> # truncate data
> datapart <- c(infec_counts[1:(Tlim+1)],rep(NA,T-Tlim))
> 
> ## IF2
> ##
> 
> # initial fit
> sourceCpp(if2file)
> if2time1 <- system.time( if2data <- if2_sirs(datapart, Tlim+1, N, NP, nPasses, coolrate) )
Initializing particle states
Starting filter
---------------
Pass
...0 / 50
...1 / 50
...2 / 50
...3 / 50
...4 / 50
...5 / 50
...6 / 50
...7 / 50
...8 / 50
...9 / 50
...10 / 50
...11 / 50
...12 / 50
...13 / 50
...14 / 50
...15 / 50
...16 / 50
...17 / 50
...18 / 50
...19 / 50
...20 / 50
...21 / 50
...22 / 50
...23 / 50
...24 / 50
...25 / 50
...26 / 50
...27 / 50
...28 / 50
...29 / 50
...30 / 50
...31 / 50
...32 / 50
...33 / 50
...34 / 50
...35 / 50
...36 / 50
...37 / 50
...38 / 50
...39 / 50
...40 / 50
...41 / 50
...42 / 50
...43 / 50
...44 / 50
...45 / 50
...46 / 50
...47 / 50
...48 / 50
...49 / 50
Parameter results (mean | sd)
-----------------------------
R0        3.794835 0.297060
r         0.106560 0.000217
re        0.419935 0.098633
sigma     3.461892 0.348808
eta       0.741399 0.017956
berr    0.269908 0.010093
S_init  489.911724 1.667521
I_init    10.088276 1.667521
R_init    0.000000 0.000000

> print(if2time1)
   user  system elapsed 
 31.464   0.241  31.892 
> 
> # IF2 parametric bootstrap
> if2time2 <- system.time(if2_paraboot_data <- if2_sirs_paraboot(if2data,
+                           T, Tlim, steps, N, nTraj,
+                           if2file, stoc_sirs_file,
+                           NP, nPasses, coolrate)
+ )
[1] 1 2
Initializing particle states
Starting filter
---------------
Pass
...0 / 50
...1 / 50
...2 / 50
...3 / 50
...4 / 50
...5 / 50
...6 / 50
...7 / 50
...8 / 50
...9 / 50
...10 / 50
...11 / 50
...12 / 50
...13 / 50
...14 / 50
...15 / 50
...16 / 50
...17 / 50
...18 / 50
...19 / 50
...20 / 50
...21 / 50
...22 / 50
...23 / 50
...24 / 50
...25 / 50
...26 / 50
...27 / 50
...28 / 50
...29 / 50
...30 / 50
...31 / 50
...32 / 50
...33 / 50
...34 / 50
...35 / 50
...36 / 50
...37 / 50
...38 / 50
...39 / 50
...40 / 50
...41 / 50
...42 / 50
...43 / 50
...44 / 50
...45 / 50
...46 / 50
...47 / 50
...48 / 50
...49 / 50
Parameter results (mean | sd)
-----------------------------
R0        4.004989 0.235691
r         0.101589 0.000191
re        0.130909 0.002340
sigma     2.671309 0.321335
eta       0.397917 0.007699
berr    0.161488 0.009176
S_init  492.164122 5.528383
I_init    7.835878 5.528383
R_init    0.000000 0.000000

Initializing particle states
Starting filter
---------------
Pass
...0 / 50
...1 / 50
...2 / 50
...3 / 50
...4 / 50
...5 / 50
...6 / 50
...7 / 50
...8 / 50
...9 / 50
...10 / 50
...11 / 50
...12 / 50
...13 / 50
...14 / 50
...15 / 50
...16 / 50
...17 / 50
...18 / 50
...19 / 50
...20 / 50
...21 / 50
...22 / 50
...23 / 50
...24 / 50
...25 / 50
...26 / 50
...27 / 50
...28 / 50
...29 / 50
...30 / 50
...31 / 50
...32 / 50
...33 / 50
...34 / 50
...35 / 50
...36 / 50
...37 / 50
...38 / 50
...39 / 50
...40 / 50
...41 / 50
...42 / 50
...43 / 50
...44 / 50
...45 / 50
...46 / 50
...47 / 50
...48 / 50
...49 / 50
Parameter results (mean | sd)
-----------------------------
R0        4.354076 0.430695
r         0.100852 0.000128
re        0.014586 0.007531
sigma     1.998824 0.290426
eta       0.765364 0.012854
berr    0.368703 0.012094
S_init  493.992377 2.524635
I_init    6.007623 2.524635
R_init    0.000000 0.000000

Warning messages:
1: executing %dopar% sequentially: no parallel backend registered 
2: In rm(if2) : object 'if2' not found
3: In rm(if2) : object 'if2' not found
> 
> if2time <- if2time1 + if2time2
> #print(if2time1)
> 
> # get mean of trajectories
> parabootdata <- data.frame(if2_paraboot_data)
> countnames <- paste("counts",1:(dim(parabootdata)[2]-10), sep = "")
> countdata <- parabootdata[,countnames]
> countmeans <- colMeans(countdata)
> 
> # get SSE, save
> truefuture  <- sdeout_true[(Tlim+2):(T+1),'I']
> estfuture   <- countmeans[-1]
> err <- estfuture - truefuture
> if2sse <- sum(err^2)
> 
> 
> ## HMC fitting with stan
> ##
> 
> datlen <- Tlim*7 + 1
> 
> data <- matrix(data = -1, nrow = T+1, ncol = steps)
> data[,1] <- datapart
> standata <- as.vector(t(data))[1:datlen]
> 
> sir_data <- list( T = datlen,       # simulation time
+                   y = standata,     # infection count data
+                   N = 500,          # population size
+                   h = 1/steps )     # step size per day
> 
> hmctime1 <- system.time( fit <- with(stan_options,
+                         stan( fit = initialfit,
+                               data    = sir_data,
+                               chains  = chains,
+                               iter    = iter,
+                               warmup  = warmup,
+                               thin    = thin)
+                         	)
+             			)

SAMPLING FOR MODEL 'sirs-euler' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 1, Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 1, Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 1, Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain 1, Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain 1, Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain 1, Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain 1, Iteration: 1200 / 2000 [ 60%]  (Sampling)Timing stopped at: 691.048 7.804 708.428 
