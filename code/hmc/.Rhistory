install.packages("rstan")
install.packages("rcpp")
install.packages("Rcpp")
install.packages("RcppEigen")
Sys.getenv('R_ARCH')
Sys.setenv(R_ARCH = '/x86_64')
install.packages("RcppEigen")
Sys.getenv('R_ARCH')
Sys.setenv(R_ARCH = '/x86_64')
Sys.getenv('R_ARCH')
install.packages("RcppEigen")
Sys.setenv(R_ARCH = '')
Sys.getenv('R_ARCH')
install.packages("RcppEigen")
setwd("~/Drive/McMaster/Current/Thesis/Rstan_stuff")
source('~/Drive/McMaster/Current/Thesis/Rstan_stuff/sir_stan.r', echo=TRUE)
pairs(fit)
setwd("~/Drive/McMaster/Current/Thesis/Rstan_stuff")
source('~/Drive/McMaster/Current/Thesis/Rstan_stuff/sir_stan.r', echo=TRUE)
library(deSolve)
library(rstan)
library(shinystan)
library(ggplot2)
library(RColorBrewer)
SIR <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
B   <- R0*r/N
BSI <- B*S*I
rI  <- r*I
dS = -BSI
dI = BSI - rI
dR = rI
return(list(c(dS, dI, dR)))
})
}
pars  <- c(R0  <- 3.0,    # average number of new infected individuals per infected person
r   <- 0.1,    # recovery rate
N   <- 500)    # population size
T <- 100
y_ini <- c(S = 495, I = 5, R = 0)
times <- seq(0, T, by = 1)
odeout <- ode(y_ini, times, SIR, pars)
set.seed(1001)
sigma <- 5
infec_counts_raw <- odeout[,3] + rnorm(101, 0, sigma)
infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
plotdata <- data.frame(times=1:(T+1),true=odeout[,3],data=infec_counts)
g <- ggplot(plotdata, aes(times)) +
geom_line(aes(y = true, colour = "True")) +
geom_point(aes(y = data, colour = "Data")) +
labs(x = "Time", y = "Infection count", color = "") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(g)
#ggsave(g, filename="dataplot.pdf", height=4, width=6.5)
sPw <- 7
datlen <- (T-1)*7 + 1
data <- matrix(data = -1, nrow = T+1, ncol = sPw)
data[,1] <- infec_counts
standata <- as.vector(t(data))[1:datlen]
sir_data <- list( T = datlen,   # simulation time
y = standata, # infection count data
N = 500,      # population size
h = 1/sPw )   # step size per day
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = "sirode_euler.stan", data = sir_data, chains = 4, iter = 6000, warmup = 1000, thin = 10 )
library(deSolve)
library(rstan)
library(shinystan)
library(ggplot2)
library(RColorBrewer)
SIR <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
B   <- R0*r/N
BSI <- B*S*I
rI  <- r*I
dS = -BSI
dI = BSI - rI
dR = rI
return(list(c(dS, dI, dR)))
})
}
pars  <- c(R0  <- 3.0,    # average number of new infected individuals per infected person
r   <- 0.1,    # recovery rate
N   <- 500)    # population size
T <- 100
y_ini <- c(S = 495, I = 5, R = 0)
times <- seq(0, T, by = 1)
odeout <- ode(y_ini, times, SIR, pars)
set.seed(1001)
sigma <- 5
infec_counts_raw <- odeout[,3] + rnorm(101, 0, sigma)
infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
plotdata <- data.frame(times=1:(T+1),true=odeout[,3],data=infec_counts)
g <- ggplot(plotdata, aes(times)) +
geom_line(aes(y = true, colour = "True")) +
geom_point(aes(y = data, colour = "Data")) +
labs(x = "Time", y = "Infection count", color = "") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(g)
#ggsave(g, filename="dataplot.pdf", height=4, width=6.5)
sPw <- 7
datlen <- (T-1)*7 + 1
data <- matrix(data = -1, nrow = T+1, ncol = sPw)
data[,1] <- infec_counts
standata <- as.vector(t(data))[1:datlen]
sir_data <- list( T = datlen,   # simulation time
y = standata, # infection count data
N = 500,      # population size
h = 1/sPw )   # step size per day
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm <- stan_model("sirode_euler.stan")
fit <- stan(sm, data = sir_data, chains = 4, iter = 6000, warmup = 1000, thin = 10 )
library(deSolve)
library(rstan)
library(shinystan)
library(ggplot2)
library(RColorBrewer)
SIR <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
B   <- R0*r/N
BSI <- B*S*I
rI  <- r*I
dS = -BSI
dI = BSI - rI
dR = rI
return(list(c(dS, dI, dR)))
})
}
pars  <- c(R0  <- 3.0,    # average number of new infected individuals per infected person
r   <- 0.1,    # recovery rate
N   <- 500)    # population size
T <- 100
y_ini <- c(S = 495, I = 5, R = 0)
times <- seq(0, T, by = 1)
odeout <- ode(y_ini, times, SIR, pars)
set.seed(1001)
sigma <- 5
infec_counts_raw <- odeout[,3] + rnorm(101, 0, sigma)
infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
plotdata <- data.frame(times=1:(T+1),true=odeout[,3],data=infec_counts)
g <- ggplot(plotdata, aes(times)) +
geom_line(aes(y = true, colour = "True")) +
geom_point(aes(y = data, colour = "Data")) +
labs(x = "Time", y = "Infection count", color = "") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(g)
#ggsave(g, filename="dataplot.pdf", height=4, width=6.5)
sPw <- 7
datlen <- (T-1)*7 + 1
data <- matrix(data = -1, nrow = T+1, ncol = sPw)
data[,1] <- infec_counts
standata <- as.vector(t(data))[1:datlen]
sir_data <- list( T = datlen,   # simulation time
y = standata, # infection count data
N = 500,      # population size
h = 1/sPw )   # step size per day
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm <- stan_model(file = "sirode_euler.stan")
fit <- stan(sm, data = sir_data, chains = 4, iter = 6000, warmup = 1000, thin = 10 )
setwd("~/Drive/McMaster/Current/Thesis/Rstan_stuff")
sm <- stan_model(file = "sirode_euler.stan")
fit <- stan(sm, data = sir_data, chains = 4, iter = 6000, warmup = 1000, thin = 10 )
sm
fit <- stan(file = "sirode_euler.stan", data = sir_data, chains = 4, iter = 6000, warmup = 1000, thin = 10 )
exfit <- extract(fit)
summary(exfit)
tracefitR0 <- traceplot(fit, pars="R0",inc_warmup = TRUE) +
scale_color_brewer(palette="Set3") +
labs(x = "Sample", y = expression(R[0]), color = "Chain") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR0)
kerdataR0 <- data.frame(R0points)
R0kernel <- ggplot(kerdataR0, aes(x = R0points, y = ..scaled..)) +
geom_density(colour="#8dd3c7", fill="#8dd3c7") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = expression(R[0]), y = "Density", color = "") +
geom_vline(aes(xintercept=R0), linetype="dashed", size=1, color="grey50")
print(R0kernel)
rpoints <- exfit$r
kerdatar <- data.frame(rpoints)
rkernel <- ggplot(kerdatar, aes(x = rpoints, y = ..scaled..)) +
geom_density(colour="#ffffb3", fill="#ffffb3") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = "r", y = "Density", color = "") +
geom_vline(aes(xintercept=r), linetype="dashed", size=1, color="grey50")
print(rkernel)
sigmapoints <- exfit$sigma
kerdatasigma <- data.frame(sigmapoints, y = ..scaled..)
sigmakernel <- ggplot(kerdatasigma, aes(x = sigmapoints)) +
geom_density(colour="#bebada", fill="#bebada") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = expression(sigma), y = "Density", color = "") +
geom_vline(aes(xintercept=sigma), linetype="dashed", size=1, color="grey50")
print(sigmakernel)
sigmapoints <- exfit$sigma
kerdatasigma <- data.frame(sigmapoints, y = ..scaled..)
sigmakernel <- ggplot(kerdatasigma, aes(x = sigmapoints)) +
geom_density(colour="#bebada", fill="#bebada") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = expression(sigma), y = "Density", color = "") +
geom_vline(aes(xintercept=sigma), linetype="dashed", size=1, color="grey50")
print(sigmakernel)
sigmapoints <- exfit$sigma
kerdatasigma <- data.frame(sigmapoints, y = ..scaled..)
sigmapoints <- exfit$sigma
kerdatasigma <- data.frame(sigmapoints)
sigmakernel <- ggplot(kerdatasigma, aes(x = sigmapoints, y = ..scaled..)) +
geom_density(colour="#bebada", fill="#bebada") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = expression(sigma), y = "Density", color = "") +
geom_vline(aes(xintercept=sigma), linetype="dashed", size=1, color="grey50")
print(sigmakernel)
infecpoints <- exfit$y0[,2]
kerdatainfec <- data.frame(infecpoints)
infeckernel <- ggplot(kerdatainfec, aes(x = infecpoints, y = ..scaled..)) +
geom_density(colour="#fb8072", fill="#fb8072") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = "Initial infected", y = "Density", color = "") +
geom_vline(aes(xintercept=5), linetype="dashed", size=1, color="grey50")
print(infeckernel)
library(deSolve)
library(rstan)
library(shinystan)
library(ggplot2)
library(RColorBrewer)
SIR <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
B   <- R0*r/N
BSI <- B*S*I
rI  <- r*I
dS = -BSI
dI = BSI - rI
dR = rI
return(list(c(dS, dI, dR)))
})
}
pars  <- c(R0  <- 3.0,    # average number of new infected individuals per infected person
r   <- 0.1,    # recovery rate
N   <- 500)    # population size
T <- 100
y_ini <- c(S = 495, I = 5, R = 0)
times <- seq(0, T, by = 1)
odeout <- ode(y_ini, times, SIR, pars)
set.seed(1001)
sigma <- 5
infec_counts_raw <- odeout[,3] + rnorm(101, 0, sigma)
infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
plotdata <- data.frame(times=1:(T+1),true=odeout[,3],data=infec_counts)
g <- ggplot(plotdata, aes(times)) +
geom_line(aes(y = true, colour = "True")) +
geom_point(aes(y = data, colour = "Data")) +
labs(x = "Time", y = "Infection count", color = "") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(g)
#ggsave(g, filename="dataplot.pdf", height=4, width=6.5)
sPw <- 7
datlen <- (T-1)*7 + 1
data <- matrix(data = -1, nrow = T+1, ncol = sPw)
data[,1] <- infec_counts
standata <- as.vector(t(data))[1:datlen]
sir_data <- list( T = datlen,   # simulation time
y = standata, # infection count data
N = 500,      # population size
h = 1/sPw )   # step size per day
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = "sirode_euler.stan", data = sir_data, chains = 4, iter = 5000, warmup = 1000, thin = 10 )
exfit <- extract(fit)
R0points <- exfit$R0
kerdataR0 <- data.frame(R0points)
R0kernel <- ggplot(kerdataR0, aes(x = R0points, y = ..scaled..)) +
geom_density(colour="#8dd3c7", fill="#8dd3c7") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = expression(R[0]), y = "Density", color = "") +
geom_vline(aes(xintercept=R0), linetype="dashed", size=1, color="grey50")
print(R0kernel)
rpoints <- exfit$r
kerdatar <- data.frame(rpoints)
rkernel <- ggplot(kerdatar, aes(x = rpoints, y = ..scaled..)) +
geom_density(colour="#ffffb3", fill="#ffffb3") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = "r", y = "Density", color = "") +
geom_vline(aes(xintercept=r), linetype="dashed", size=1, color="grey50")
print(rkernel)
sigmapoints <- exfit$sigma
kerdatasigma <- data.frame(sigmapoints)
sigmakernel <- ggplot(kerdatasigma, aes(x = sigmapoints, y = ..scaled..)) +
geom_density(colour="#bebada", fill="#bebada") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = expression(sigma), y = "Density", color = "") +
geom_vline(aes(xintercept=sigma), linetype="dashed", size=1, color="grey50")
print(sigmakernel)
infecpoints <- exfit$y0[,2]
kerdatainfec <- data.frame(infecpoints)
infeckernel <- ggplot(kerdatainfec, aes(x = infecpoints, y = ..scaled..)) +
geom_density(colour="#fb8072", fill="#fb8072") +
theme(panel.background = element_rect(fill = "#F0F0F0")) +
scale_color_brewer(palette="Set3") +
labs(x = "Initial infected", y = "Density", color = "") +
geom_vline(aes(xintercept=5), linetype="dashed", size=1, color="grey50")
print(infeckernel)
summary(exfit)
tracefitR0 <- traceplot(fit, pars="R0",inc_warmup = TRUE) +
scale_color_brewer(palette="Set3") +
labs(x = "Sample", y = expression(R[0]), color = "Chain") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR0)
tracefitR0 <- traceplot(fit, pars="R0",inc_warmup = FALSE) +
scale_color_brewer(palette="Set3") +
labs(x = "Sample", y = expression(R[0]), color = "Chain") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR0)
summary(exfit)
plotdata <- data.frame(samples = 500, data = exfit$R0)
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data[1:400], colour = "1")) +
geom_line(aes(y = data[401:800], colour = "2")) +
geom_line(aes(y = data[801:1200], colour = "3")) +
geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
plotdata <- data.frame(samples = 1:500, data = exfit$R0)
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data[1:400], colour = "1")) +
geom_line(aes(y = data[401:800], colour = "2")) +
geom_line(aes(y = data[801:1200], colour = "3")) +
geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
plotdata <- data.frame(samples = 1:400, data = exfit$R0)
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data[1:400], colour = "1")) +
geom_line(aes(y = data[401:800], colour = "2")) +
geom_line(aes(y = data[801:1200], colour = "3")) +
geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
exfit$R0
data[1:400]
ls()
plot(1:400,exfit$R0)
size(exfit$R0)
length(exfit$R0)
length(exfit$R0[1:400])
plot(1:400,exfit$R0[1:400])
plotdata <- data.frame(samples = 1:400, data = exfit$R0)
plotdata
tracefitR02 <- ggplot(plotdata, aes(samples[1:400])) +
geom_line(aes(y = data[1:400], colour = "1")) +
geom_line(aes(y = data[401:800], colour = "2")) +
geom_line(aes(y = data[801:1200], colour = "3")) +
geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
tracefitR02 <- ggplot(plotdata, aes(1:400)) +
geom_line(aes(y = data[1:400], colour = "1")) +
geom_line(aes(y = data[401:800], colour = "2")) +
geom_line(aes(y = data[801:1200], colour = "3")) +
geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
plotdata <- data.frame(samples = 1:400, data = exfit$R0)
plotdata <- data.frame(samples = 1:400, data = exfit$R0)
tracefitR02 <- ggplot(plotdata, x = aes(samples)) +
geom_line(aes(y = data[1:400], colour = "1")) +
geom_line(aes(y = data[401:800], colour = "2")) +
geom_line(aes(y = data[801:1200], colour = "3")) +
geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
tracefitR02 <- ggplot(plotdata, x = aes(samples)) +
geom_line(aes(y = data[1:400], colour = "1"))
print(tracefitR02)
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data[1:400], colour = "1"))
print(tracefitR02)
times
1:400
plotdata <- data.frame(samples = 1:400, data = exfit$R0)
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data[1:400], colour = "1")) +
#geom_line(aes(y = data[401:800], colour = "2")) +
#geom_line(aes(y = data[801:1200], colour = "3")) +
#geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
tracefitR02 <- ggplot(plotdata, aes(1:400)) +
geom_line(aes(y = data[1:400], colour = "1")) +
#geom_line(aes(y = data[401:800], colour = "2")) +
#geom_line(aes(y = data[801:1200], colour = "3")) +
#geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
plotdata <- melt(data.frame(samples = 1:400, data = exfit$R0))
library(reshape2)
plotdata <- melt(data.frame(samples = 1:400, data = exfit$R0))
tracemat <- matrix(data = exfit$R0, nrow = 400, rcol = 4)
tracemat <- matrix(data = exfit$R0, nrow = 400, ncol = 4)
tracemat
plotdata <- melt(data.frame(samples = 1:400, data = tracemat))
plotdata <- data.frame(samples = 1:400, data = tracemat)
tracefitR02 <- ggplot(plotdata, aes(1:400)) +
geom_line(aes(y = data[,1], colour = "1")) +
#geom_line(aes(y = data[401:800], colour = "2")) +
#geom_line(aes(y = data[801:1200], colour = "3")) +
#geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data[,1], colour = "1")) +
#geom_line(aes(y = data[401:800], colour = "2")) +
#geom_line(aes(y = data[801:1200], colour = "3")) +
#geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
plotdata <- data.frame(samples = 1:400, data = tracemat)
plotdata
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data.1, colour = "1")) +
#geom_line(aes(y = data[401:800], colour = "2")) +
#geom_line(aes(y = data[801:1200], colour = "3")) +
#geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data.1, colour = "1")) +
geom_line(aes(y = data[401:800], colour = "2")) +
geom_line(aes(y = data[801:1200], colour = "3")) +
geom_line(aes(y = data[1201:1600], colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data.1, colour = "1")) +
geom_line(aes(y = data.2, colour = "2")) +
geom_line(aes(y = data.3, colour = "3")) +
geom_line(aes(y = data.4, colour = "4")) +
labs(x = "Time", y = "Infection count", color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
tracefitR02 <- ggplot(plotdata, aes(samples)) +
geom_line(aes(y = data.1, colour = "1")) +
geom_line(aes(y = data.2, colour = "2")) +
geom_line(aes(y = data.3, colour = "3")) +
geom_line(aes(y = data.4, colour = "4")) +
labs(x = "Sample", y = expression(R[0]), color = "Chain") +
scale_color_brewer(palette="Set3") +
theme(panel.background = element_rect(fill = "#F0F0F0"))
print(tracefitR02)
toString(1)
toString(10)
options <- c (chains = 4, iter = 5000, warmup = 1000, thin = 10)
options
options.chains
options$chains
options[1]
options.chains = 1
options.chains
options.chains <- 1
options.chains
sir_data <- list( T = datlen,   # simulation time
y = standata, # infection count data
N = 500,      # population size
h = 1/sPw )   # step size per day
sirdata$T
sir_data$T
sir_data.T
