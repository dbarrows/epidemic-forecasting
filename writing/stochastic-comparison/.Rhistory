sigma 	<- 10
Tlim 	<- T
## Generate true trajecory and synthetic data
##
pars_true <- c(R0 = 3.0, 	# new infected people per infected person
r = 0.1, 		# recovery rate
N = 500, 		# population size
eta = 0.5, 	# geometric random walk
berr = 0.5) 	# Beta geometric walk noise
true_init_cond <- c(S = N - i_infec,
I = i_infec,
R = 0)
sdeout_true <- StocSIR(true_init_cond, pars_true, T, steps)
colnames(sdeout_true) <- c('S','I','R','B')
infec_counts_raw <- sdeout_true[,'I'] + rnorm(T+1, 0, sigma)
infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
datapart <- c(infec_counts[1:(Tlim+1)],rep(NA,T-Tlim))
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_point(aes(y = datapart)) +
theme_bw()
StocSIR <- function(y, pars, T, steps) {
out <- matrix(NA, nrow = (T+1), ncol = 4)
R0 <- pars[['R0']]
r <- pars[['r']]
N <- pars[['N']]
eta <- pars[['eta']]
berr <- pars[['berr']]
S <- y[['S']]
I <- y[['I']]
R <- y[['R']]
B0 <- R0 * r / N
B <- B0
out[1,] <- c(S,I,R,B)
h <- 1 / steps
for ( i in 1:(T*steps) ) {
B <- exp( log(B) + eta*(log(B0) - log(B)) + rnorm(1, 0, berr) )
BSI <- B*S*I
rI <- r*I
dS <- -BSI
dI <- BSI - rI
dR <- rI
S <- S + h*dS  #newInf
I <- I + h*dI  #newInf - h*dR
R <- R + h*dR  #h*dR
if (i %% steps == 0)
out[i/steps+1,] <- c(S,I,R,B)
}
return(out)
}
T 		<- 60
i_infec <- 5
steps 	<- 7
N 		<- 500
sigma 	<- 10
Tlim 	<- T
## Generate true trajecory and synthetic data
##
pars_true <- c(R0 = 3.0, 	# new infected people per infected person
r = 0.1, 		# recovery rate
N = 500, 		# population size
eta = 0.5, 	# geometric random walk
berr = 0.5) 	# Beta geometric walk noise
true_init_cond <- c(S = N - i_infec,
I = i_infec,
R = 0)
sdeout_true <- StocSIR(true_init_cond, pars_true, T, steps)
colnames(sdeout_true) <- c('S','I','R','B')
infec_counts_raw <- sdeout_true[,'I'] + rnorm(T+1, 0, sigma)
infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
datapart <- c(infec_counts[1:(Tlim+1)],rep(NA,T-Tlim))
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_point(aes(y = datapart)) +
theme_bw()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Drive/McMaster/Current/Thesis/writing/stochastic-comparison")
source('~/.active-rstudio-document', echo=TRUE)
head(paramdata)
head(convergedata)
head(statedata)
head(finalstates)
source('~/.active-rstudio-document', echo=TRUE)
datapart <- c(statedata[,'I'],rep(NA,T-Tlim))
datapart
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
states 	<- finalstates[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T-Tlim)
for (i in 1:nTraj) {
init_cond <- c(S = states$Sinit[i],
I = states$Iinit[i],
R = states$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T-Tlim-1, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
meanTrajpart 	<- c(rep(NA, Tlim), meanTraj)
quantTrajpart 	<- c(rep(NA, Tlim), quantTraj)
meanTrajpart
statepart <- c(statedata[,'I'],rep(NA,T-Tlim))
qplot(0:T, sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection counts") +
geom_point(aes(y = datapart)) +
geom_line(aes(y = statepart), linetype = "dashed") +
theme_bw()
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
states 	<- finalstates[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T-Tlim)
for (i in 1:nTraj) {
init_cond <- c(S = states$Sinit[i],
I = states$Iinit[i],
R = states$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T-Tlim-1, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
meanTrajpart 	<- c(rep(NA, Tlim), meanTraj)
quantTrajpart 	<- c(rep(NA, Tlim), quantTraj)
meanTrajpart
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
states 	<- finalstates[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T-Tlim)
for (i in 1:nTraj) {
init_cond <- c(S = states$Sinit[i],
I = states$Iinit[i],
R = states$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T-Tlim, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
meanTrajpart 	<- c(rep(NA, Tlim), meanTraj)
quantTrajpart 	<- c(rep(NA, Tlim), quantTraj)
meanTrajpart
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
states 	<- finalstates[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T-Tlim+1)
for (i in 1:nTraj) {
init_cond <- c(S = states$Sinit[i],
I = states$Iinit[i],
R = states$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T-Tlim, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
meanTrajpart 	<- c(rep(NA, Tlim), meanTraj)
quantTrajpart 	<- c(rep(NA, Tlim), quantTraj)
meanTrajpart
quantTrajpart
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
states 	<- finalstates[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T-Tlim+1)
for (i in 1:nTraj) {
init_cond <- c(S = states$Sinit[i],
I = states$Iinit[i],
R = states$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T-Tlim, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
meanTrajpart 	<- c(rep(NA, Tlim), meanTraj)
quantTrajpart 	<- rbind(matrix(NA, nrow = Tlim, ncol = 2), quantTraj)
meanTrajpart
quantTrajpart
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
states 	<- finalstates[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T-Tlim+1)
for (i in 1:nTraj) {
init_cond <- c(S = states$Sinit[i],
I = states$Iinit[i],
R = states$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T-Tlim, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
meanTrajpart 	<- c(rep(NA, Tlim), meanTraj)
quantTrajpart 	<- rbind(matrix(NA, nrow = Tlim, ncol = 2), quantTraj)
qplot(0:T, sdeout_true[,I], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTrajpart[,'025'], ymax=quantTrajpart[,'975']), alpha=0.1) +
geom_line(aes(y = meanTrajpart), linetype = "dashed") +
geom_point(aes(y = datapart)) +
geom_line(aes(y = statepart), linetype = "dashed") +
theme_bw()
meanTrajpart
statepart
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
states 	<- finalstates[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T-Tlim+1)
for (i in 1:nTraj) {
init_cond <- c(S = states$Sinit[i],
I = states$Iinit[i],
R = states$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T-Tlim, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
meanTrajpart 	<- c(rep(NA, Tlim), meanTraj)
quantTrajpart 	<- rbind(matrix(NA, nrow = Tlim, ncol = 2), quantTraj)
qplot(0:T, sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTrajpart[,'025'], ymax=quantTrajpart[,'975']), alpha=0.1) +
geom_line(aes(y = meanTrajpart), linetype = "dashed") +
geom_point(aes(y = datapart)) +
geom_line(aes(y = statepart), linetype = "dashed") +
theme_bw()
quantTrajpart[,'025']
meanTrajpart
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
states 	<- finalstates[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T-Tlim+1)
for (i in 1:nTraj) {
init_cond <- c(S = states$S[i],
I = states$I[i],
R = states$R[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T-Tlim, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
meanTrajpart 	<- c(rep(NA, Tlim), meanTraj)
quantTrajpart 	<- rbind(matrix(NA, nrow = Tlim, ncol = 2), quantTraj)
qplot(0:T, sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTrajpart[,'025'], ymax=quantTrajpart[,'975']), alpha=0.1) +
geom_line(aes(y = meanTrajpart), linetype = "dashed") +
geom_point(aes(y = datapart)) +
geom_line(aes(y = statepart), linetype = "dashed") +
theme_bw()
truefuture <- sdeout_true[(Tlim+1):T,'I']
relerr <- (meanTraj - truefuture) / truefuture
truefuture <- sdeout_true[(Tlim+1):T,'I']
truefuture
meanTraj
truefuture  <- sdeout_true[(Tlim+1):T,'I']
estfuture   <- meanTraj[-1]
relerr <- (meanTraj - truefuture) / truefuture
relerr <- (estfuture - truefuture) / truefuture
relerr
mean(relerr)
mean(relerr)*100
mean(relerr^2)
rellerr^2
relerr^2
truefuture  <- sdeout_true[(Tlim+1):T,'I']
estfuture   <- meanTraj[-1]
err <- estfuture - truefuture
sse <- sum(err^2)
sse
library(rstan)
library(reshape2)
datlen <- Tlim*7 + 1
data <- matrix(data = -1, nrow = Tlim+1, ncol = steps)
data[,1] <- infec_counts[1:(Tlim+1)]
standata <- as.vector(t(data))[1:datlen]
datlen
standata
sir_data <- list( T = datlen,   	# simulation time
y = standata, 	# infection count data
N = 500,      	# population size
h = 1/steps )   	# step size per day
rstan_options(auto_write = TRUE)
stan_options <- list(   chains = 1,    		# number of chains
iter   = 5000, 		# iterations per chain
warmup = 1000, 		# warmup interations
thin   = 10)   		# thinning number
hmcfile <- paste(getwd(), "../../code/stochastic-comparison/hmc", "sirode_euler.stan", sep="/")
hmctime <- system.time(fit <- with(stan_options,
stan(file  	= hmcfile,
data    = sir_data,
chains  = chains,
iter    = iter,
warmup  = warmup,
thin    = thin)
)
)
nTraj <- 100
# sample from parameter distributions
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T+1)
for (i in 1:nTraj) {
init_cond <- c(S = params$Sinit[i],
I = params$Iinit[i],
R = params$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
#bootstrapdata
meanTraj 	<- colMeans(bootstrapdata, na.rm = FALSE)
#meanTraj 	<- ifelse(meanTraj < 0, 0, meanTraj)
quantTraj 	<- t( apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975), na.rm = FALSE) )
#meanTraj
#quantTraj
#if (FALSE) {
colnames(quantTraj) <- c("025","975")
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTraj[,'025'], ymax=quantTraj[,'975']), alpha=0.1) +
geom_line(aes(y = meanTraj), linetype = "dashed") +
geom_point(aes(y = datapart)) +
geom_line(aes(y = avTraj), linetype = "dotted") +
theme_bw()
nTraj <- 100
# sample from parameter distributions
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T+1)
for (i in 1:nTraj) {
init_cond <- c(S = params$Sinit[i],
I = params$Iinit[i],
R = params$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
#bootstrapdata
meanTraj 	<- colMeans(bootstrapdata, na.rm = FALSE)
#meanTraj 	<- ifelse(meanTraj < 0, 0, meanTraj)
quantTraj 	<- t( apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975), na.rm = FALSE) )
#meanTraj
#quantTraj
#if (FALSE) {
colnames(quantTraj) <- c("025","975")
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTraj[,'025'], ymax=quantTraj[,'975']), alpha=0.1) +
geom_line(aes(y = meanTraj), linetype = "dashed") +
geom_point(aes(y = datapart)) +
#geom_line(aes(y = avTraj), linetype = "dotted") +
theme_bw()
truefuture  <- sdeout_true[(Tlim+1):T,'I']
estfuture   <- meanTraj[(Tlim+1):T]
err <- estfuture - truefuture
sse <- sum(err^2)
sse
err
truefuture  <- sdeout_true[(Tlim+1):T,'I']
estfuture   <- meanTraj[-1]
err <- estfuture - truefuture
sse <- sum(err^2)
sse
err
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
states 	<- finalstates[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T-Tlim+1)
for (i in 1:nTraj) {
init_cond <- c(S = states$S[i],
I = states$I[i],
R = states$R[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T-Tlim, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
meanTrajpart 	<- c(rep(NA, Tlim), meanTraj)
quantTrajpart 	<- rbind(matrix(NA, nrow = Tlim, ncol = 2), quantTraj)
qplot(0:T, sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTrajpart[,'025'], ymax=quantTrajpart[,'975']), alpha=0.1) +
geom_line(aes(y = meanTrajpart), linetype = "dashed") +
geom_point(aes(y = datapart)) +
geom_line(aes(y = statepart), linetype = "dashed") +
theme_bw()
truefuture  <- sdeout_true[(Tlim+1):T,'I']
estfuture   <- meanTraj[-1]
err <- estfuture - truefuture
sse <- sum(err^2)
sse
err
truefuture
meanTraj
nTraj <- 100
# sample from parameter distributions
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T+1)
for (i in 1:nTraj) {
init_cond <- c(S = params$Sinit[i],
I = params$Iinit[i],
R = params$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata, na.rm = FALSE)
#meanTraj 	<- ifelse(meanTraj < 0, 0, meanTraj)
quantTraj 	<- t( apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975), na.rm = FALSE) )
colnames(quantTraj) <- c("025","975")
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTraj[,'025'], ymax=quantTraj[,'975']), alpha=0.1) +
geom_line(aes(y = meanTraj), linetype = "dashed") +
geom_point(aes(y = datapart)) +
theme_bw()
truefuture  <- sdeout_true[(Tlim+1):T,'I']
estfuture   <- meanTraj[(Tlim+1):T]
err <- estfuture - truefuture
sse <- sum(err^2)
sse
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Drive/McMaster/Current/Thesis/writing/stochastic-comparison")
source('~/.active-rstudio-document', echo=TRUE)
