S <- S + h*dS  #newInf
I <- I + h*dI  #newInf - h*dR
R <- R + h*dR  #h*dR
if (i %% steps == 0)
out[i/steps+1,] <- c(S,I,R,B)
}
return(out)
}
set.seed(1001)
T 		<- 60
i_infec <- 5
steps 	<- 7
N 		<- 500
sigma 	<- 10
Tlim 	<- T
## Generate true trajecory and synthetic data
##
pars_true <- c(R0 = 3.0, 	# new infected people per infected person
r = 0.1, 		# recovery rate
N = 500, 		# population size
eta = 0.5, 	# geometric random walk
berr = 0.3) 	# Beta geometric walk noise
true_init_cond <- c(S = N - i_infec,
I = i_infec,
R = 0)
sdeout_true <- StocSIR(true_init_cond, pars_true, T, steps)
colnames(sdeout_true) <- c('S','I','R','B')
infec_counts_raw <- sdeout_true[,'I'] + rnorm(T+1, 0, sigma)
infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
datapart <- c(infec_counts[1:(Tlim+1)],rep(NA,T-Tlim))
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_point(aes(y = datapart)) +
theme_bw()
numtraj <- 100
trajData <- matrix(NA, nrow = numtraj, ncol = (T+1))
for(i in 1:numtraj) {
sdeout <- StocSIR(true_init_cond, pars_true, T, steps)
colnames(sdeout) <- c('S','I','R','B')
trajData[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(trajData)
quantTraj 	<- t(apply(trajData, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
qplot(1:(T+1), meanTraj, geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTraj[,'025'], ymax=quantTraj[,'975']), alpha=0.1) +
theme_bw()
library(Rcpp)
if2file <- paste(getwd(),"../../code/stochastic-comparison/if2/if2.cpp",sep="/")
sourceCpp(if2file)
system.time( if2data <- data.frame(if2(infec_counts[1:(Tlim+1)], Tlim+1, N)) )
paramdata <- if2data[,1:8]
colnames(paramdata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
convergedata <- if2data[1:100,9:16]
colnames(convergedata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
library(Rcpp)
if2file <- paste(getwd(),"../../code/stochastic-comparison/if2/if2.cpp",sep="/")
sourceCpp(if2file)
system.time( if2data <- data.frame(if2(infec_counts[1:(Tlim+1)], Tlim+1, N)) )
paramdata <- if2data[,1:8]
colnames(paramdata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
convergedata <- if2data[1:100,9:16]
colnames(convergedata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
setwd("C:/Users/Dexter/Drive/McMaster/Current/Thesis/writing/stochastic-comparison")
setwd("C:/Users/Dexter/Drive/McMaster/Current/Thesis/writing/stochastic-comparison")
library(Rcpp)
if2file <- paste(getwd(),"../../code/stochastic-comparison/if2/if2.cpp",sep="/")
sourceCpp(if2file)
system.time( if2data <- data.frame(if2(infec_counts[1:(Tlim+1)], Tlim+1, N)) )
paramdata <- if2data[,1:8]
colnames(paramdata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
convergedata <- if2data[1:100,9:16]
colnames(convergedata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T+1)
for (i in 1:nTraj) {
init_cond <- c(S = params$Sinit[i],
I = params$Iinit[i],
R = params$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTraj[,'025'], ymax=quantTraj[,'975']), alpha=0.1) +
geom_line(aes(y = meanTraj), linetype = "dashed") +
geom_point(aes(y = datapart)) +
theme_bw()
library(Rcpp)
if2file <- paste(getwd(),"../../code/stochastic-comparison/if2/if2.cpp",sep="/")
sourceCpp(if2file)
system.time( if2data <- data.frame(if2(infec_counts[1:(Tlim+1)], Tlim+1, N)) )
paramdata <- if2data[,1:8]
colnames(paramdata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
convergedata <- if2data[1:100,9:16]
colnames(convergedata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T+1)
for (i in 1:nTraj) {
init_cond <- c(S = params$Sinit[i],
I = params$Iinit[i],
R = params$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTraj[,'025'], ymax=quantTraj[,'975']), alpha=0.1) +
geom_line(aes(y = meanTraj), linetype = "dashed") +
geom_point(aes(y = datapart)) +
theme_bw()
library(gridExtra)
meanval.R0 		<- mean(paramdata$R0)
meanval.r 		<- mean(paramdata$r)
meanval.sigma 	<- mean(paramdata$sigma)
meanval.Iinit 	<- mean(paramdata$Iinit)
meanval.eta 	<- mean(paramdata$eta)
meanval.berr 	<- mean(paramdata$berr)
linecolour <- "grey50"
lineweight <- 0.5
R0kernel <- qplot(paramdata$R0, geom = "density", xlab = expression(R[0]), ylab = "frequency") +
geom_vline(aes(xintercept=pars_true['R0']), linetype="solid", size=lineweight, color=linecolour) +
geom_vline(aes(xintercept=meanval.R0), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
rkernel <- qplot(paramdata$r, geom = "density", xlab = "r") +
geom_vline(aes(xintercept=pars_true['r']), linetype="solid", size=lineweight, color=linecolour) +
geom_vline(aes(xintercept=meanval.r), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
sigmakernel <- qplot(paramdata$sigma, geom = "density", xlab = expression(sigma)) +
geom_vline(aes(xintercept=sigma), linetype="solid", size=lineweight, color=linecolour) +
geom_vline(aes(xintercept=meanval.sigma), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
infeckernel <- qplot(paramdata$Iinit, geom = "density", xlab = "Initial Infected", ylab = "frequency") +
geom_vline(aes(xintercept=i_infec), linetype="solid", size=lineweight, color=linecolour) +
geom_vline(aes(xintercept=meanval.Iinit), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
etakernel <- qplot(paramdata$eta, geom = "density", xlab = expression(eta)) +
geom_vline(aes(xintercept=pars_true['eta']), linetype="solid", size=lineweight, color=linecolour) +
geom_vline(aes(xintercept=meanval.eta), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
berrkernel <- qplot(paramdata$berr, geom = "density", xlab = expression(epsilon[proc])) +
geom_vline(aes(xintercept=pars_true['berr']), linetype="solid", size=lineweight, color=linecolour) +
geom_vline(aes(xintercept=meanval.berr), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
# show grid
grid.arrange(R0kernel, rkernel, sigmakernel, infeckernel, etakernel, berrkernel, ncol = 3, nrow = 2)
source('C:/Users/Dexter/Drive/McMaster/Current/Thesis/code/stochastic-comparison/if2/if2bootstrap.r', echo=TRUE)
setwd("C:/Users/Dexter/Drive/McMaster/Current/Thesis/code/stochastic-comparison/if2")
source('C:/Users/Dexter/Drive/McMaster/Current/Thesis/code/stochastic-comparison/if2/if2bootstrap.r', echo=TRUE)
source('C:/Users/Dexter/Drive/McMaster/Current/Thesis/code/stochastic-comparison/if2/if2bootstrap.r', echo=TRUE)
source('C:/Users/Dexter/Drive/McMaster/Current/Thesis/code/stochastic-comparison/if2/if2bootstrap.r', echo=TRUE)
library(Rcpp)
if2file <- paste(getwd(),"../../code/stochastic-comparison/if2/if2.cpp",sep="/")
sourceCpp(if2file)
system.time( if2data <- data.frame(if2(infec_counts[1:(Tlim+1)], Tlim+1, N)) )
paramdata <- if2data[,1:8]
colnames(paramdata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
convergedata <- if2data[1:100,9:16]
colnames(convergedata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
setwd("C:/Users/Dexter/Drive/McMaster/Current/Thesis/writing/stochastic-comparison")
library(Rcpp)
if2file <- paste(getwd(),"../../code/stochastic-comparison/if2/if2.cpp",sep="/")
sourceCpp(if2file)
system.time( if2data <- data.frame(if2(infec_counts[1:(Tlim+1)], Tlim+1, N)) )
paramdata <- if2data[,1:8]
colnames(paramdata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
convergedata <- if2data[1:100,9:16]
colnames(convergedata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
numtraj <- 100
trajData <- matrix(NA, nrow = numtraj, ncol = (T+1))
for(i in 1:numtraj) {
sdeout <- StocSIR(true_init_cond, pars_true, T, steps)
colnames(sdeout) <- c('S','I','R','B')
trajData[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(trajData)
quantTraj 	<- t(apply(trajData, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
qplot(1:(T+1), meanTraj, geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTraj[,'025'], ymax=quantTraj[,'975']), alpha=0.1) +
theme_bw()
nTraj 		<- 100 	# trajectories for both bootstrapping runs
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T+1)
for (i in 1:nTraj) {
init_cond <- c(S = params$Sinit[i],
I = params$Iinit[i],
R = params$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTraj[,'025'], ymax=quantTraj[,'975']), alpha=0.1) +
geom_line(aes(y = meanTraj), linetype = "dashed") +
geom_point(aes(y = datapart)) +
theme_bw()
meanval.R0 		<- mean(paramdata$R0)
meanval.r 		<- mean(paramdata$r)
meanval.sigma 	<- mean(paramdata$sigma)
meanval.Iinit 	<- mean(paramdata$Iinit)
meanval.eta 	<- mean(paramdata$eta)
meanval.berr 	<- mean(paramdata$berr)
R0converge <- qplot(1:dim(paramdata)[1], convergencedata$R0, geom = "line", xlab = expression(R[0]), ylab = "frequency") +
geom_hline(aes(yintercept=pars_true['R0']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.R0), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
rconverge <- qplot(1:dim(paramdata)[1], convergencedata$r, geom = "line", xlab = "r") +
geom_hline(aes(yintercept=pars_true['r']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.r), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
sigmaconverge <- qplot(1:dim(paramdata)[1], convergencedata$sigma, geom = "line", xlab = expression(sigma)) +
geom_hline(aes(yintercept=sigma), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.sigma), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
infecconverge <- qplot(1:dim(paramdata)[1], convergencedata$Iinit, geom = "line", xlab = "Initial Infected", ylab = "frequency") +
geom_hline(aes(yintercept=i_infec), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.Iinit), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
etaconverge <- qplot(1:dim(paramdata)[1], convergencedata$eta, geom = "line", xlab = expression(eta)) +
geom_hline(aes(yintercept=pars_true['eta']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.eta), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
berrconverge <- qplot(1:dim(paramdata)[1], convergencedata$berr, geom = "line", xlab = expression(epsilon[proc])) +
geom_hline(aes(yintercept=pars_true['berr']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.berr), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
# show grid
#quartz()
grid.arrange(R0converge, rconverge, sigmaconverge, infecconverge, etaconverge, berrconverge, ncol = 3, nrow = 2)
meanval.R0 		<- mean(paramdata$R0)
meanval.r 		<- mean(paramdata$r)
meanval.sigma 	<- mean(paramdata$sigma)
meanval.Iinit 	<- mean(paramdata$Iinit)
meanval.eta 	<- mean(paramdata$eta)
meanval.berr 	<- mean(paramdata$berr)
R0converge <- qplot(1:dim(paramdata)[1], convergedata$R0, geom = "line", xlab = expression(R[0]), ylab = "frequency") +
geom_hline(aes(yintercept=pars_true['R0']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.R0), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
rconverge <- qplot(1:dim(paramdata)[1], convergedata$r, geom = "line", xlab = "r") +
geom_hline(aes(yintercept=pars_true['r']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.r), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
sigmaconverge <- qplot(1:dim(paramdata)[1], convergedata$sigma, geom = "line", xlab = expression(sigma)) +
geom_hline(aes(yintercept=sigma), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.sigma), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
infecconverge <- qplot(1:dim(paramdata)[1], convergedata$Iinit, geom = "line", xlab = "Initial Infected", ylab = "frequency") +
geom_hline(aes(yintercept=i_infec), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.Iinit), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
etaconverge <- qplot(1:dim(paramdata)[1], convergedata$eta, geom = "line", xlab = expression(eta)) +
geom_hline(aes(yintercept=pars_true['eta']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.eta), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
berrconverge <- qplot(1:dim(paramdata)[1], convergedata$berr, geom = "line", xlab = expression(epsilon[proc])) +
geom_hline(aes(yintercept=pars_true['berr']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.berr), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
# show grid
#quartz()
grid.arrange(R0converge, rconverge, sigmaconverge, infecconverge, etaconverge, berrconverge, ncol = 3, nrow = 2)
meanval.R0 		<- mean(convergedata$R0)
meanval.r 		<- mean(convergedata$r)
meanval.sigma 	<- mean(convergedata$sigma)
meanval.Iinit 	<- mean(convergedata$Iinit)
meanval.eta 	<- mean(convergedata$eta)
meanval.berr 	<- mean(convergedata$berr)
R0converge <- qplot(1:dim(convergedata)[1], convergedata$R0, geom = "line", xlab = expression(R[0]), ylab = "frequency") +
geom_hline(aes(yintercept=pars_true['R0']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.R0), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
rconverge <- qplot(1:dim(convergedata)[1], convergedata$r, geom = "line", xlab = "r") +
geom_hline(aes(yintercept=pars_true['r']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.r), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
sigmaconverge <- qplot(1:dim(convergedata)[1], convergedata$sigma, geom = "line", xlab = expression(sigma)) +
geom_hline(aes(yintercept=sigma), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.sigma), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
infecconverge <- qplot(1:dim(convergedata)[1], convergedata$Iinit, geom = "line", xlab = "Initial Infected", ylab = "frequency") +
geom_hline(aes(yintercept=i_infec), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.Iinit), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
etaconverge <- qplot(1:dim(convergedata)[1], convergedata$eta, geom = "line", xlab = expression(eta)) +
geom_hline(aes(yintercept=pars_true['eta']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.eta), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
berrconverge <- qplot(1:dim(convergedata)[1], convergedata$berr, geom = "line", xlab = expression(epsilon[proc])) +
geom_hline(aes(yintercept=pars_true['berr']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.berr), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
# show grid
#quartz()
grid.arrange(R0converge, rconverge, sigmaconverge, infecconverge, etaconverge, berrconverge, ncol = 3, nrow = 2)
meanval.R0 		<- mean(convergedata$R0)
meanval.r 		<- mean(convergedata$r)
meanval.sigma 	<- mean(convergedata$sigma)
meanval.Iinit 	<- mean(convergedata$Iinit)
meanval.eta 	<- mean(convergedata$eta)
meanval.berr 	<- mean(convergedata$berr)
R0converge <- qplot(1:dim(convergedata)[1], convergedata$R0, geom = "line", xlab = expression(R[0]), ylab = "frequency") +
geom_hline(aes(yintercept=pars_true['R0']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.R0), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
rconverge <- qplot(1:dim(convergedata)[1], convergedata$r, geom = "line", xlab = "r", ylab = "") +
geom_hline(aes(yintercept=pars_true['r']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.r), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
sigmaconverge <- qplot(1:dim(convergedata)[1], convergedata$sigma, geom = "line", xlab = expression(sigma), ylab = "") +
geom_hline(aes(yintercept=sigma), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.sigma), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
infecconverge <- qplot(1:dim(convergedata)[1], convergedata$Iinit, geom = "line", xlab = "Initial Infected", ylab = "frequency") +
geom_hline(aes(yintercept=i_infec), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.Iinit), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
etaconverge <- qplot(1:dim(convergedata)[1], convergedata$eta, geom = "line", xlab = expression(eta), ylab = "") +
geom_hline(aes(yintercept=pars_true['eta']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.eta), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
berrconverge <- qplot(1:dim(convergedata)[1], convergedata$berr, geom = "line", xlab = expression(epsilon[proc]), ylab = "") +
geom_hline(aes(yintercept=pars_true['berr']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.berr), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
# show grid
#quartz()
grid.arrange(R0converge, rconverge, sigmaconverge, infecconverge, etaconverge, berrconverge, ncol = 3, nrow = 2)
StocSIR <- function(y, pars, T, steps) {
out <- matrix(NA, nrow = (T+1), ncol = 4)
R0 <- pars[['R0']]
r <- pars[['r']]
N <- pars[['N']]
eta <- pars[['eta']]
berr <- pars[['berr']]
S <- y[['S']]
I <- y[['I']]
R <- y[['R']]
B0 <- R0 * r / N
B <- B0
out[1,] <- c(S,I,R,B)
h <- 1 / steps
for ( i in 1:(T*steps) ) {
B <- exp( log(B) + eta*(log(B0) - log(B)) + rnorm(1, 0, berr) )
BSI <- B*S*I
rI <- r*I
dS <- -BSI
dI <- BSI - rI
dR <- rI
S <- S + h*dS  #newInf
I <- I + h*dI  #newInf - h*dR
R <- R + h*dR  #h*dR
if (i %% steps == 0)
out[i/steps+1,] <- c(S,I,R,B)
}
return(out)
}
set.seed(1001)
T 		<- 60
i_infec <- 5
steps 	<- 7
N 		<- 500
sigma 	<- 10
Tlim 	<- T
## Generate true trajecory and synthetic data
##
pars_true <- c(R0 = 3.0, 	# new infected people per infected person
r = 0.1, 		# recovery rate
N = 500, 		# population size
eta = 0.5, 	# geometric random walk
berr = 0.3) 	# Beta geometric walk noise
true_init_cond <- c(S = N - i_infec,
I = i_infec,
R = 0)
sdeout_true <- StocSIR(true_init_cond, pars_true, T, steps)
colnames(sdeout_true) <- c('S','I','R','B')
infec_counts_raw <- sdeout_true[,'I'] + rnorm(T+1, 0, sigma)
infec_counts     <- ifelse(infec_counts_raw < 0, 0, infec_counts_raw)
datapart <- c(infec_counts[1:(Tlim+1)],rep(NA,T-Tlim))
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_point(aes(y = datapart)) +
theme_bw()
meanval.R0 		<- mean(convergedata$R0)
meanval.r 		<- mean(convergedata$r)
meanval.sigma 	<- mean(convergedata$sigma)
meanval.Iinit 	<- mean(convergedata$Iinit)
meanval.eta 	<- mean(convergedata$eta)
meanval.berr 	<- mean(convergedata$berr)
R0converge <- qplot(1:dim(convergedata)[1], convergedata$R0, geom = "line", xlab = expression(R[0]), ylab = "frequency") +
geom_hline(aes(yintercept=pars_true['R0']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.R0), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
rconverge <- qplot(1:dim(convergedata)[1], convergedata$r, geom = "line", xlab = "r", ylab = "") +
geom_hline(aes(yintercept=pars_true['r']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.r), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
sigmaconverge <- qplot(1:dim(convergedata)[1], convergedata$sigma, geom = "line", xlab = expression(sigma), ylab = "") +
geom_hline(aes(yintercept=sigma), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.sigma), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
infecconverge <- qplot(1:dim(convergedata)[1], convergedata$Iinit, geom = "line", xlab = "Initial Infected", ylab = "frequency") +
geom_hline(aes(yintercept=i_infec), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.Iinit), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
etaconverge <- qplot(1:dim(convergedata)[1], convergedata$eta, geom = "line", xlab = expression(eta), ylab = "") +
geom_hline(aes(yintercept=pars_true['eta']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.eta), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
berrconverge <- qplot(1:dim(convergedata)[1], convergedata$berr, geom = "line", xlab = expression(epsilon[proc]), ylab = "") +
geom_hline(aes(yintercept=pars_true['berr']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.berr), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
# show grid
#quartz()
grid.arrange(R0converge, rconverge, sigmaconverge, infecconverge, etaconverge, berrconverge, ncol = 3, nrow = 2)
library(Rcpp)
if2file <- paste(getwd(),"../../code/stochastic-comparison/if2/if2.cpp",sep="/")
sourceCpp(if2file)
system.time( if2data <- data.frame(if2(infec_counts[1:(Tlim+1)], Tlim+1, N)) )
paramdata <- if2data[,1:8]
colnames(paramdata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
convergedata <- if2data[1:100,9:16]
colnames(convergedata) <- c("R0", "r", "sigma", "eta", "berr", "Sinit", "Iinit", "Rinit")
datlen 	<- dim(paramdata)[1]
inds 	<- sample.int(datlen,nTraj,replace = TRUE)
params 	<- paramdata[inds,]
bootstrapdata <- matrix(NA, nrow = nTraj, ncol = T+1)
for (i in 1:nTraj) {
init_cond <- c(S = params$Sinit[i],
I = params$Iinit[i],
R = params$Rinit[i])
pars <- c(R0 = params$R0[i],
r = params$r[i],
N = 500.0,
eta = params$eta[i],
berr = params$berr[i])
sdeout <- StocSIR(init_cond, pars, T, steps)
colnames(sdeout) <- c('S','I','R','B')
bootstrapdata[i,] <- sdeout[,'I']
}
meanTraj 	<- colMeans(bootstrapdata)
quantTraj 	<- t(apply(bootstrapdata, 2, quantile, probs = c(0.025,0.975)))
colnames(quantTraj) <- c("025","975")
qplot(1:(T+1), sdeout_true[,'I'], geom = "line", xlab = "Time", ylab = "Infection count") +
geom_ribbon(aes(ymin = quantTraj[,'025'], ymax=quantTraj[,'975']), alpha=0.1) +
geom_line(aes(y = meanTraj), linetype = "dashed") +
geom_point(aes(y = datapart)) +
theme_bw()
meanval.R0 		<- mean(convergedata$R0)
meanval.r 		<- mean(convergedata$r)
meanval.sigma 	<- mean(convergedata$sigma)
meanval.Iinit 	<- mean(convergedata$Iinit)
meanval.eta 	<- mean(convergedata$eta)
meanval.berr 	<- mean(convergedata$berr)
R0converge <- qplot(1:dim(convergedata)[1], convergedata$R0, geom = "line", xlab = expression(R[0]), ylab = "frequency") +
geom_hline(aes(yintercept=pars_true['R0']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.R0), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
rconverge <- qplot(1:dim(convergedata)[1], convergedata$r, geom = "line", xlab = "r", ylab = "") +
geom_hline(aes(yintercept=pars_true['r']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.r), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
sigmaconverge <- qplot(1:dim(convergedata)[1], convergedata$sigma, geom = "line", xlab = expression(sigma), ylab = "") +
geom_hline(aes(yintercept=sigma), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.sigma), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
infecconverge <- qplot(1:dim(convergedata)[1], convergedata$Iinit, geom = "line", xlab = "Initial Infected", ylab = "frequency") +
geom_hline(aes(yintercept=i_infec), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.Iinit), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
etaconverge <- qplot(1:dim(convergedata)[1], convergedata$eta, geom = "line", xlab = expression(eta), ylab = "") +
geom_hline(aes(yintercept=pars_true['eta']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.eta), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
berrconverge <- qplot(1:dim(convergedata)[1], convergedata$berr, geom = "line", xlab = expression(epsilon[proc]), ylab = "") +
geom_hline(aes(yintercept=pars_true['berr']), linetype="solid", size=lineweight, color=linecolour) +
geom_hline(aes(yintercept=meanval.berr), linetype="dashed", size=lineweight, color=linecolour) +
theme_bw()
# show grid
#quartz()
grid.arrange(R0converge, rconverge, sigmaconverge, infecconverge, etaconverge, berrconverge, ncol = 3, nrow = 2)
